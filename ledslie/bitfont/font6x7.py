# A 5 by 7 pixel font. Based on https://github.com/noopkat/oled-font-5x7/blob/master/oled-font-5x7.js
# Each entry is a unicode-point and a glyph.
# Glyph is 7 bytes. One byte for each row.
# U+0043 (C) is ['0x0e', '0x11', '0x01', '0x01', '0x01', '0x11', '0x0e']
#      /- 0 1 2 3 4
# 0x0e 0  . X X X .
# 0x11 1  X . . . X
# 0x01 2  X . . . .
# 0x01 3  X . . . .
# 0x01 4  X . . . .
# 0x11 5  X . . . X
# 0x0e 6  . X X X .

from .generic import GenericFont

font6x7 = GenericFont(6, 7, {
    0x0020: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0020 ( )
    0x0021: [0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04],  # U+0021 (!)
    0x0022: [0x0a, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00],  # U+0022 (")
    0x0023: [0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a],  # U+0023 (#)
    0x0024: [0x04, 0x1e, 0x05, 0x0e, 0x14, 0x0f, 0x04],  # U+0024 ($)
    0x0025: [0x03, 0x13, 0x08, 0x04, 0x02, 0x19, 0x18],  # U+0025 (%)
    0x0026: [0x06, 0x09, 0x05, 0x02, 0x15, 0x09, 0x16],  # U+0026 (&)
    0x0027: [0x06, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00],  # U+0027 (')
    0x0028: [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08],  # U+0028 (()
    0x0029: [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02],  # U+0029 ())
    0x002a: [0x00, 0x0a, 0x04, 0x1f, 0x04, 0x0a, 0x00],  # U+002a (*)
    0x002b: [0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00],  # U+002b (+)
    0x002c: [0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x02],  # U+002c (,)
    0x002d: [0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00],  # U+002d (-)
    0x002e: [0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06],  # U+002e (.)
    0x002f: [0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00],  # U+002f (/)
    0x0030: [0x0e, 0x11, 0x19, 0x15, 0x13, 0x11, 0x0e],  # U+0030 (0)
    0x0031: [0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x0e],  # U+0031 (1)
    0x0032: [0x0e, 0x11, 0x10, 0x08, 0x04, 0x02, 0x1f],  # U+0032 (2)
    0x0033: [0x1f, 0x08, 0x04, 0x08, 0x10, 0x11, 0x0e],  # U+0033 (3)
    0x0034: [0x08, 0x0c, 0x0a, 0x09, 0x1f, 0x08, 0x08],  # U+0034 (4)
    0x0035: [0x1f, 0x01, 0x0f, 0x10, 0x10, 0x11, 0x0e],  # U+0035 (5)
    0x0036: [0x0c, 0x02, 0x01, 0x0f, 0x11, 0x11, 0x0e],  # U+0036 (6)
    0x0037: [0x1f, 0x10, 0x08, 0x04, 0x02, 0x02, 0x02],  # U+0037 (7)
    0x0038: [0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e],  # U+0038 (8)
    0x0039: [0x0e, 0x11, 0x11, 0x1e, 0x10, 0x08, 0x06],  # U+0039 (9)
    0x003a: [0x00, 0x06, 0x06, 0x00, 0x06, 0x06, 0x00],  # U+003a (:)
    0x003b: [0x00, 0x06, 0x06, 0x00, 0x06, 0x04, 0x02],  # U+003b (;)
    0x003c: [0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10],  # U+003c (<)
    0x003d: [0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00],  # U+003d (=)
    0x003e: [0x01, 0x02, 0x04, 0x08, 0x04, 0x02, 0x01],  # U+003e (>)
    0x003f: [0x0e, 0x11, 0x10, 0x08, 0x04, 0x00, 0x04],  # U+003f (?)
    0x0040: [0x0e, 0x11, 0x10, 0x16, 0x15, 0x15, 0x0e],  # U+0040 (@)
    0x0041: [0x0e, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11],  # U+0041 (A)
    0x0042: [0x0f, 0x11, 0x11, 0x0f, 0x11, 0x11, 0x0f],  # U+0042 (B)
    0x0043: [0x0e, 0x11, 0x01, 0x01, 0x01, 0x11, 0x0e],  # U+0043 (C)
    0x0044: [0x07, 0x09, 0x11, 0x11, 0x11, 0x09, 0x07],  # U+0044 (D)
    0x0045: [0x1f, 0x01, 0x01, 0x0f, 0x01, 0x01, 0x1f],  # U+0045 (E)
    0x0046: [0x1f, 0x01, 0x01, 0x07, 0x01, 0x01, 0x01],  # U+0046 (F)
    0x0047: [0x0e, 0x11, 0x01, 0x01, 0x19, 0x11, 0x0e],  # U+0047 (G)
    0x0048: [0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11],  # U+0048 (H)
    0x0049: [0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e],  # U+0049 (I)
    0x004a: [0x1c, 0x08, 0x08, 0x08, 0x08, 0x09, 0x06],  # U+004a (J)
    0x004b: [0x11, 0x09, 0x05, 0x03, 0x05, 0x09, 0x11],  # U+004b (K)
    0x004c: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1f],  # U+004c (L)
    0x004d: [0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11],  # U+004d (M)
    0x004e: [0x11, 0x11, 0x13, 0x15, 0x19, 0x11, 0x11],  # U+004e (N)
    0x004f: [0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e],  # U+004f (O)
    0x0050: [0x0f, 0x11, 0x11, 0x0f, 0x01, 0x01, 0x01],  # U+0050 (P)
    0x0051: [0x0e, 0x11, 0x11, 0x11, 0x15, 0x09, 0x16],  # U+0051 (Q)
    0x0052: [0x0f, 0x11, 0x11, 0x0f, 0x05, 0x09, 0x11],  # U+0052 (R)
    0x0053: [0x1e, 0x01, 0x01, 0x0e, 0x10, 0x10, 0x0f],  # U+0053 (S)
    0x0054: [0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],  # U+0054 (T)
    0x0055: [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e],  # U+0055 (U)
    0x0056: [0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04],  # U+0056 (V)
    0x0057: [0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11],  # U+0057 (W)
    0x0058: [0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11],  # U+0058 (X)
    0x0059: [0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04],  # U+0059 (Y)
    0x005a: [0x1f, 0x10, 0x08, 0x04, 0x02, 0x01, 0x1f],  # U+005a (Z)
    0x005b: [0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c],  # U+005b ([)
    0x005c: [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00],  # U+005c (\)
    0x005d: [0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07],  # U+005d (])
    0x005e: [0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00],  # U+005e (^)
    0x005f: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f],  # U+005f (_)
    0x0060: [0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00],  # U+0060 (`)
    0x0061: [0x00, 0x00, 0x0e, 0x10, 0x1e, 0x11, 0x1e],  # U+0061 (a)
    0x0062: [0x01, 0x01, 0x0d, 0x13, 0x11, 0x11, 0x0f],  # U+0062 (b)
    0x0063: [0x00, 0x00, 0x0e, 0x01, 0x01, 0x11, 0x0e],  # U+0063 (c)
    0x0064: [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1e],  # U+0064 (d)
    0x0065: [0x00, 0x00, 0x0e, 0x11, 0x1f, 0x01, 0x0e],  # U+0065 (e)
    0x0066: [0x0c, 0x12, 0x02, 0x07, 0x02, 0x02, 0x02],  # U+0066 (f)
    0x0067: [0x00, 0x00, 0x1e, 0x11, 0x1e, 0x10, 0x0c],  # U+0067 (g)
    0x0068: [0x01, 0x01, 0x0d, 0x13, 0x11, 0x11, 0x11],  # U+0068 (h)
    0x0069: [0x04, 0x00, 0x06, 0x04, 0x04, 0x04, 0x0e],  # U+0069 (i)
    0x006a: [0x08, 0x00, 0x0c, 0x08, 0x08, 0x09, 0x06],  # U+006a (j)
    0x006b: [0x02, 0x02, 0x12, 0x0a, 0x06, 0x0a, 0x12],  # U+006b (k)
    0x006c: [0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e],  # U+006c (l)
    0x006d: [0x00, 0x00, 0x0b, 0x15, 0x15, 0x11, 0x11],  # U+006d (m)
    0x006e: [0x00, 0x00, 0x0d, 0x13, 0x11, 0x11, 0x11],  # U+006e (n)
    0x006f: [0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e],  # U+006f (o)
    0x0070: [0x00, 0x00, 0x0f, 0x11, 0x0f, 0x01, 0x01],  # U+0070 (p)
    0x0071: [0x00, 0x00, 0x16, 0x19, 0x1e, 0x10, 0x10],  # U+0071 (q)
    0x0072: [0x00, 0x00, 0x0d, 0x13, 0x01, 0x01, 0x01],  # U+0072 (r)
    0x0073: [0x00, 0x00, 0x0e, 0x01, 0x0e, 0x10, 0x0f],  # U+0073 (s)
    0x0074: [0x02, 0x02, 0x07, 0x02, 0x02, 0x12, 0x0c],  # U+0074 (t)
    0x0075: [0x00, 0x00, 0x11, 0x11, 0x11, 0x19, 0x16],  # U+0075 (u)
    0x0076: [0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04],  # U+0076 (v)
    0x0077: [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a],  # U+0077 (w)
    0x0078: [0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11],  # U+0078 (x)
    0x0079: [0x00, 0x00, 0x11, 0x11, 0x1e, 0x10, 0x0e],  # U+0079 (y)
    0x007a: [0x00, 0x00, 0x1f, 0x08, 0x04, 0x02, 0x1f],  # U+007a (z)
    0x007b: [0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08],  # U+007b ({)
    0x007c: [0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],  # U+007c (|)
    0x007d: [0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02],  # U+007d (})

    0x20ac: [0x1c, 0x02, 0x0f, 0x02, 0x0f, 0x02, 0x1c],  # U+20AC (euro sign)
    0x27a1: [0x0, 0x4, 0x8, 0x1f, 0x8, 0x4, 0x0], # âž¡
    0x1f68a: [[0x3e, 0x1, 0x39, 0x21, 0x21, 0x1, 0x3e], [0xf, 0x10, 0x13, 0x10, 0x10, 0x10, 0xf]], # Tram emoji
    0x1f687: [[0x38, 0x6, 0x19, 0x29, 0x9, 0x6, 0x38], [0x3, 0xc, 0x13, 0x12, 0x12, 0xc, 0x3]], # Metro emoji
    0x1f68c: [[0x3f, 0x9, 0x9, 0x9, 0x3f, 0x33, 0xc], [0x1f, 0xa, 0x12, 0x12, 0x1f, 0x19, 0x6]], # Bus emoji
})

## Transformation code to generate dict entries from 5 col bytes, to 7 row bytes.
## in  [0x3E, 0x41, 0x41, 0x41, 0x22,] # C
## out 0x0043: ['0x1c', '0x23', '0x03', '0x02', '0x03', '0x23', '0x1c'],  # U+0043 (C)
# def testBit(int_type, offset):
#     mask = 1 << offset
#     return (int_type & mask)
#
# def setBit(int_type, offset):
#     mask = 1 << offset
#     return(int_type | mask)
#
# def rotate_font(inp):
#     out = [0x00 for x in range(7)]
#     for n, b in enumerate(inp):
#         # print(n, hex(b))
#         for m in range(8):
#             # print(n, hex(b), m, testBit(b, m) != 0)
#             if testBit(b, m)!=0:
#                 out[m] = setBit(out[m], n)
#     return out
#
# charDict = {}
# charData = []
# start_point = 0x20
# for nr, b in enumerate(fontData):
#     charData.append(b)
#     if nr % 5 == 4:
#         res = rotate_font(charData)
#         hex_str = ", ".join(["0x{:02x}".format(x) for x in res])
#         u_point = start_point + int(nr/5)
#         print("    0x{:04x}: [{}],  # U+{:04x} ({})".format(u_point, hex_str, u_point, chr(u_point)))
#         charData = []
